function get_innerHTML(){let markup;return'\n<h3>innerHTML</h3>\n<p>The innerHTML property is used to get or set the HTML content of an element node.\ninnerHTML is a property of every element.</p>\n<h5><i>document.getElementById(id).innerHTML = another HTML</i></h5>\n<h4><u>innerHTML security issues</u>.</h4>\n<p>"Safe-ness" of the .innerHTML property is debatable and depends on its use.\nIt\'s a security issue if it inserts user-provided values,\nbut if you use it to insert static data, or something generated without\nincluding any inputs from the user, it\'s not a security concern.\nIf you’re adding content to a page that you didn’t write, \nyou should sanitize it to protect yourself from XSS attacks.\nTo best ensure security it is always a good practice to encode\nor "sanitize" any user data on a page.\nThe best way to prevent .innerHTML XSS is with validating\nuser input or encoding it and using innerText instead of .innerHTML when able.\nHTML5 specifies that a script tag inserted with innerHTML should not execute. </p>\n\n<h5>Example. InnerHTML risk. </h5>\n<fieldset>\n\t<legend>HTML</legend>\n\t<script type="text/plain" class="language-markup">\t\t\t\t\n    <div id="texter"></div>\n    <textarea id="textarea"></textarea>    \n    <button onclick="upper()">Go</button>\n\t<\/script>\t\n</fieldset>\n<fieldset>\n\t<legend>JavaScript</legend>\n\t<script type="text/plain" class="language-markup">\t\t\t\t\n    function upper(){\n        var message = "<p>" + document.getElementById("textarea").value + "</p>";    \n        document.getElementById("texter").innerHTML += message;    \n    }\n\t<\/script>\t\n</fieldset>\n<p>HTML5 specifies that a script tag inserted with innerHTML should not execute.\nSo next input will not execute.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<script type="text/plain" class="language-markup">\nvalue = \'<script>alert("XSS Attack");&lt;/script&gt;\';\ndocument.getElementById("texter").innerHTML += value;\n<\/script>\n</fieldset>\n<p>But still the next input will execute</p>\n<fieldset>\n<legend>JavaScript</legend>\n<script type="text/plain" class="language-markup">\nvalue = \'<script deferred>alert("XSS Attack");&lt;/script&gt;\';\ndocument.getElementById("texter").innerHTML += value;\n<\/script>\n</fieldset>\n<p>and next input will execute</p>\n<fieldset>\n<legend>JavaScript</legend>\n<pre><code class="language-markup">\nvalue = \'&lt;img src=x onerror="alert(\'XSS Attack\')"&gt;\';\ndocument.getElementById("texter").innerHTML += value;\n</code></pre></fieldset>\n<p>So is always a good practice to encode\nor "sanitize" any user data on a page.</p>\n'}