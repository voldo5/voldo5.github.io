function get_bookletClass(){let markup;return'\n<h3>Issue. Booklet Class.</h3>\n<p>Create the Booklet class to handle the booklet object with id = \'booklet\'.\nSee Issue:\n<a href="javascript:booklet.navigateRegularPages(\'get_docHtml\', \'Booklet html code\');">\nBooklet html code.</a> </p>\n\n<h4>Code.</p>\n<h5><strong>Keywords: </strong></h5>\n\n<h5>1. Booklet class.</h5>\n<h5>1.1. Variables.</h5>\n<p>First of all, we define variables for booklet elements.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">booklet.js</div>\n<pre><code class="language-javascript">\nclass Booklet { \n    bookletCover = document.querySelector("#booklet");\n    bookletSpiralBinding = document.querySelector("#bookletSpiralBinding");     \n    frontPage = document.querySelector("#frontPage");\n    frontPageTitle = document.querySelector(".front-page-title");\n    regularPageCover = document.querySelector("#regularPageCover");\n    linkList = document.querySelectorAll(".front-page a, .regular-page a");    \n    dropdownButtonList = document.querySelectorAll(".dropdown-bt");    \n    closeButton = document.querySelector(".close-button");\n    regularPageContent = document.querySelector(".regular-page-content"); \n    handler = document.querySelector(".handler");     \n    //...\n}\n</code></pre></fieldset>\n\n<h5>1.2. Constructor</h5>\n<p>In the contstructor we add listeners for \'close\' button, for menu dropdowns and \nfor all anchor elements, that are links to the documentation pages.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">booklet.js</div>\n<pre><code class="language-javascript">\nclass Booklet { \n    //...\n    constructor() { \n        // add listener for \'close\' button       \n        this.closeButton.addEventListener("click", this.closeDocumentation);\n        // add listener for dropdowns\n        this.dropdownButtonList.forEach((dropdownBt) => {\n            dropdownBt.addEventListener("click", function () {\n                this.classList.toggle("active");                \n                var dropdownContent = this.nextElementSibling;\n                if (dropdownContent.style.display === "block") {\n                    dropdownContent.style.display = "none";\n                } else {\n                    dropdownContent.style.display = "block";\n                }\n            });\n        });\n        // add listener for menu links\n        this.linkList.forEach((a) => {\n            a.addEventListener("click", function () {                            \n                if (!currentLinkTextContent) {\n                    // show first selected regular page                     \n                    booklet.frontPage.classList.remove("booklet-closed");\n                    booklet.bookletSpiralBinding.classList.add("image-display-none");                    \n                    booklet.bookletCover.classList.remove("booklet-opened");                   \n                    booklet.regularPageCover.classList.add("visible"); \n                    booklet.frontPageTitle.textContent = "Contents";\n                    booklet.handler.classList.add("visible"); \n                    // get name of function with current page markup\n                    let fnName = a.href.split("#").slice().pop();                    \n                    let markup = window[fnName]();\n                    booklet.regularPageContent.innerHTML = markup;    \n                    Prism.highlightAllUnder(booklet.regularPageContent);   \n                    let verticalSeparator = document.querySelector(\'.handler\');\n                    booklet.dragVerticalSeparator(verticalSeparator);\n                    currentLinkTextContent = a.textContent;\n                }  \n                else if(a.textContent === currentLinkTextContent){ \n                    // close selected regular page  \n                    console.log("currentLinkTextContent = " , currentLinkTextContent)                 \n                    booklet.frontPage.classList.toggle("booklet-closed");                    \n                    booklet.bookletCover.classList.toggle("booklet-opened");\n                    booklet.bookletSpiralBinding.classList.toggle("image-display-none");\n                    booklet.regularPageCover.classList.toggle("visible");\n                    booklet.frontPageTitle.textContent = "Tabelo Project";\n                    currentLinkTextContent = \' \';\n                    booklet.handler.classList.remove("visible"); \n                }\n                else { \n                        // show next selected regular page \n                        booklet.frontPage.classList.remove("booklet-closed");\n                        booklet.bookletCover.classList.add("booklet-opened");\n                        booklet.bookletSpiralBinding.classList.add("image-display-none");\n                        booklet.regularPageCover.classList.add("visible");\n                        booklet.frontPageTitle.textContent = "Contents";\n                        booklet.handler.classList.add("visible"); \n                        // get markup\n                        let fnName = a.href.split("#").slice().pop();                        \n                        let markup = window[fnName]();                         \n                        booklet.regularPageContent.innerHTML = markup;                        \n                        Prism.highlightAllUnder(booklet.regularPageContent);\n                        currentLinkTextContent = a.textContent;\n                }                   \n                \n                booklet.linkList.forEach(a => {\n                    a.classList.remove(\'a-active\');                    \n                });                \n                a.classList.add(\'a-active\');                       \n            });\n        });        \n    }\n    //...\n</code></pre></fieldset>\n<p>In the anchor listener we get from href the name of js file  \nthat contains the page markup.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<pre><code class="language-javascript">\nlet fnName = a.href.split("#").slice().pop(); \n</code></pre></fieldset>\n\n<p>Then we get markup from the file.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<pre><code class="language-javascript">\nlet markup = window[fnName]();\n</code></pre></fieldset>\n\n<p>And put the markup in the booklet regular page.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<pre><code class="language-javascript">\nbooklet.regularPageContent.innerHTML = markup;  \n</code></pre></fieldset> \n\n<h5>1.3. Methods.</h5>\n<p>Class contains several methods.</p>\n<ul>\n<li>openDocumentation(), closeDocumentation()</li>\n<p>Mehods to display and hide documentation.</p>\n<li>navigateRegularPages()</li>\n<p>Mehods to highlight menu and change page content.</p>\n<li>dragVerticalSeparator()</li>\n<p>Mehods to change page width.</p>\n</ul>\n\n<h5>2. Booklet object.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">index.js</div>\n<pre><code class="language-javascript">\nfunction init() {\n    //...\t\n    booklet = new Booklet();\n    //...\n}\n</code></pre></fieldset>\n'}