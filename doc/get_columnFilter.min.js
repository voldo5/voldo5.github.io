function get_columnFilter(){let markup;return'\n<h3>Issue. Column Filter.</h3>\n<p>Add column filter to table second header row as on Fig.1</h5>\n<h5>Fig.1</h5>        \n<img src="\\assets\\picsDoc\\doc_columnFilter.jpg" alt="Column Filter"\nclass="img-small-responsive" width="600" height="400">\n<p>Open the dropdown menu if the user clicks on the filter icon.\nClose the dropdown menu if the user clicks in a location other than the menu.\nAdd the ability to select the columns of the table in which you want to search\nand the ability to select what search should be: case sensitive or not.</p5>\n\n<h4>Code.</p>\n<h5><strong>Keywords: </strong></h5>\n\n<h5>1. Add filter icon.</h5>\n<p>For some icons we used fluent API. But for filter icon we will use\nstraightforward approach: create container for filter icon, add filter icon\nto container, add container to header second row cell. After that in p.2,\nwe also add dropdown menu to icon container.</h5>\n<h5>1.1. Create IconFilter class for filter icon in container.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">icon-filter.js</div>\n<pre><code class="language-javascript">\nclass IconFilter {\n    // span - icon container\n    span = document.createElement(\'span\');        \n    constructor(containerClassName, iconId, iconClass) {\n        this.span.classList.add(containerClassName);\n        this.span.id = "containerIconFilter";\n        // add tooltip  \n        this.span.classList.add("tooltip");\n        this.span.classList.add("fade");\n        let iconToolTip = "Filter table by columns";\n        this.span.setAttribute("data-tooltip", iconToolTip);      \n        // add icon    \n        let iElement = document.createElement(\'i\');\n        iElement.id = iconId;\n        let iconClassList = iconClass.split(" ");\n        iconClassList.forEach(item => iElement.classList.add(item));\n        this.span.appendChild(iElement);\n        // put dropdown into container\n        let dropdownFilter = new DropdownFilter();\n        this.span.appendChild(dropdownFilter.dropdown_filter);\n        // add listener to icon\n        iElement.addEventListener("click", () => {\n            this.toggleVisibility(dropdownFilter.dropdown_filter);\n        });\n    }\n    // ...\n}\n</code></pre></fieldset>\n<h5>1.2. Add css for elements created by IconFilter object.</h5>\n<fieldset>\n    <legend>CSS</legend>\n    <div class="legend2">icon_filter.css</div>\n    <pre><code class="language-css">\n    .container-iconFilter {    \n        margin-left: 2.1rem;\n        position: relative;    \n    }\n    .container-iconFilter:before { \n      top: -48px;\n      left: -96px;\n    }\n    .container-iconFilter .fa-filter {\n        color: seagreen;\n        font-size: 1.3rem;\n        margin: 0.2rem;\n        padding: 0.2rem;    \n        cursor: pointer;\n        font-weight: lighter ;\n      } \n      .container-iconFilter .fa-filter:hover {\n       color: #00aff0;\n       /* color: #02729b; */  \n       font-size: 1.3rem;\n       margin: 0.2rem;\n       padding: 0.2rem;  \n       cursor: pointer;\n       font-weight: lighter ;\n     } \n     .container-iconFilter .fa-filter:after {\n       content: "007C";   \n       color:  teal;\n       font-size: 1.3rem;\n       font-weight: bold;   \n       margin: 0 0 0 0.6rem;\n       padding:0;\n      }  \n    </code></pre>\n</fieldset>\n\n<h5>2. Add dropdown menu.</h5>\n<p>Dropdown menu is not fully dynamic - it has some html</p>\n<h5>2.1. Create html and css parts of dropdown filter.</h5>\n<fieldset>\n\t<legend>HTML</legend>\n\t<script type="text/plain" class="language-markup">\t\t\t\t\n    <div id="filterContainer" class="filter-container">\n\t\t<div class="filter-hdr1">Search Columns</div>\n\t\t<ul class="filter-ul">\n\t\t</ul>\n\t\t<div class="filter-hdr1">Search Case</div>\n\t\t<ul class="filter-ul">\n\t\t\t<li class="filter-li">\n\t\t\t\t<input type="radio" id="radio1" name="searchType" class="filter-radio" value="insensitive" checked />\n\t\t\t\t<label for="insensitive">Insensitive</label>\n\t\t\t</li>\n\t\t\t<li class="filter-li">\n\t\t\t\t<input type="radio" id="radio2" name="searchType" class="filter-radio" value="sensitive" />\n\t\t\t\t<label for="insensitive">Sensitive</label>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n    <\/script>\n</fieldset>\n\n<fieldset>\n    <legend>CSS</legend>\n    <div class="legend2">icon_filter.css</div>\n    <pre><code class="language-css">\n    .filter-container {\n        left: -6.6rem;\n        top: 1.7rem;\n        border: 1px solid rgb(191, 191, 248);\n        position: absolute; \n        padding: 0 0.4rem;\n        z-index: 12;\n        /* z-index: 12000000000; */\n        background-color: #fff; \n        background: #fff; \n        /* background-color: rgba(255, 0, 0, 0.5);  */\n        /* opacity: 0.5; */\n        /* background: red; */\n        border-radius: 4px;\n        border: 1px solid lightblue; \n        display: none;    \n      }\n      .filter-container.visible{ \n        display: block;  \n      }  \n      .filter-container .filter-hdr1 {\n        padding: 6px 6px 0 6px;\n        margin-bottom: 0;\n        border-bottom: 2px solid teal ;\n        color: teal;\n        font-weight: 500;\n      }\n      .filter-container .filter-ul {\n        display: inline-block;  \n        padding: 6px;\n        margin: 0; \n        /* z-index: 12; */\n      }\n      .filter-container .filter-li {  \n        padding: 0;\n        list-style: none; \n        text-align: left;\n        font-weight: normal; \n        /* z-index: 12; */\n      }\n      .filter-container label {  \n        margin: 0;  \n      }\n      .filter-container .filter-checkbox,\n      .filter-container .filter-radio  {\n        margin-right: 4px;\n      }  \n    </code></pre>\n</fieldset>\n    \n<h5>2.2. Create class DropdownFilter.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">icon-filter.js</div>\n<pre><code class="language-javascript">\nclass IconFilter {\n    // span for icon\n    span = document.createElement(\'span\');\n        \n    constructor(containerClassName, iconId, iconClass) {\n        \n        // put icon into container         \n        this.span.classList.add(containerClassName);\n        this.span.id = "containerIconFilter";\n        // tooltip  \n        this.span.classList.add("tooltip");\n        this.span.classList.add("fade");\n        let iconToolTip = "Filter table by columns";\n        this.span.setAttribute("data-tooltip", iconToolTip);      \n        // icon    \n        let iElement = document.createElement(\'i\');\n        iElement.id = iconId;\n        let iconClassList = iconClass.split(" ");\n        iconClassList.forEach(item => iElement.classList.add(item));\n        this.span.appendChild(iElement);        \n\n        // put dropdown into container\n        let dropdownFilter = new DropdownFilter();\n        this.span.appendChild(dropdownFilter.dropdown_filter);\n\n        iElement.addEventListener("click", () => {\n            this.toggleVisibility(dropdownFilter.dropdown_filter);\n        });\n    }\n    // ...\n}\n</code></pre></fieldset>\n\n<h5>2.3. Add dropdown menu to filter icon container. See p.1.1.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">icon-filter.js</div>\n<pre><code class="language-javascript">\nclass IconFilter {\n        // ...\n        // put dropdown into container\n        let dropdownFilter = new DropdownFilter();\n        this.span.appendChild(dropdownFilter.dropdown_filter);\n\n        iElement.addEventListener("click", () => {\n            this.toggleVisibility(dropdownFilter.dropdown_filter);\n        });\n    }\n    // ...\n}\n</code></pre></fieldset>\n\n<h5>2.4. Add methods that toggle visibility of dropdown menu and update the search filter,\nwhen user clicked on filter icon.  We need update, because between open/close dropdown menu,\nuser can check/uncheck columns.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">icon-filter.js</div>\n<pre><code class="language-javascript">\ntoggleVisibility(dropdown){\n    if(dropdown.classList.contains("visible")){\n        dropdown.classList.remove("visible");\n        this.updateSearchFilter();        \n    }\n    else{\n        dropdown.classList.add("visible"); \n    }                \n}\n\nupdateSearchFilter() {\n    var checkboxes = document.querySelectorAll(".filter-checkbox");\n    // remove class "checked" from all cells \n    table.tableHeaderContext.cellContexts.forEach(context => {\n        context.cssClassList = this.removeClassFromArray(context.cssClassList, "checked");\n    });\n    \n    // add css class "checked" to the cell context css class list\n    // if in search filter dropdown the column name in checked         \n    for (var i = 0; i < checkboxes.length; i++) {            \n        let caption = checkboxes[i].parentElement.textContent; \n        \n        table.tableHeaderContext.cellContexts.forEach(context => {\n            let newContext = [];\n            if(caption === context.caption && checkboxes[i].checked)\n            {\n                newContext = JSON.parse(JSON.stringify(context.cssClassList));                    \n                context.cssClassList = this.addClassToArray(newContext, "checked");                   \n            } \n                          \n        });\n    }\n\n    let radio = document.querySelector("#radio1");\n    radio.checked ? table.tableHeaderContext.isSencitiveSearch = "false" :\n                    table.tableHeaderContext.isSencitiveSearch = "true";\n}\n</code></pre></fieldset>\n<p>Check/uncheck boxes in dropdown menu is css/html matter. So we need function that copy\ninformation about checked boxes from dropdown menu to table context, because we recriate table\nafter every change accordingly to the table context.</p>\n\n<h5>3. Add column filter icon to table header second row cell.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ncreateTableHeaderSecondRow() {\n    // ...\n    let iconFilter = new IconFilter("container-iconFilter", "icon-filter", "fa fa-filter");\n    let flexContainer = cell.querySelector(".icon-flex-container");\t\t\n    flexContainer.appendChild(iconFilter.span);\t\n    // ...\t\t\n}\t\n</code></pre></fieldset>\n\n<h5>4. Close dropdown menu when user clicked outside dropdown menu.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">index.js</div>\n<pre><code class="language-javascript">\nwindow.addEventListener(\'load\', () => {\n    // ...\n\t// close filter dropdown if user clicked outside of filter dropdown\n\tlet filterContainer = document.querySelector(\'#filterContainer\');\t\n\tdocument.onclick = function (e) {\n\t\tif (!document.getElementById(\'containerIconFilter\').contains(e.target)) {\n\t\t\t// Clicked outside the box\n\t\t\tfilterContainer.classList.remove("visible");\n\t\t}\n\t};\n});\t\n</code></pre></fieldset>\n'}