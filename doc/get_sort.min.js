function get_sort(){let markup;return"\n<h3>sort array</h3>\n<p>The sort() method sorts the elements of an array in place\nand returns the sorted array. The default sort order is ascending,\nbuilt upon converting the elements into strings,\nthen comparing their sequences of UTF-16 code units values.</p>\n<h5>arr.sort([compareFunction])</h5>\n<p>If compareFunction is not supplied, all non-undefined array \nelements are sorted by converting them to strings and comparing \nstrings in UTF-16 code units order. If compareFunction is supplied, \nall non-undefined array elements are sorted according to the return \nvalue of the compare function</p>\n<h5>Example. Objects sorted by the value of one of their properties.</h5>\n\n<fieldset>\n<legend>JavaScript</legend>\n<pre><code class=\"language-javascript\">\nvar items = [\n    { name: 'Edward', value: 21 },\n    { name: 'Sharpe', value: 37 },\n    { name: 'And', value: 45 },\n    { name: 'The', value: -12 },\n    { name: 'Magnetic', value: 13 },\n    { name: 'Zeros', value: 37 }\n  ];\n  \n  // sort by value\n  items.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  \n  // sort by name\n  items.sort(function(a, b) {\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n  \n    // names must be equal\n    return 0;\n  });\n</code></pre>\n</fieldset>\n\n<h5>Examples from project:</h5> \n<ul>\n<li>Sort table by several columns using recursive comparing function.\nIssue: <a href=\"javascript:booklet.navigateRegularPages('get_tableSort', 'Table Sort');\">\nTable Sort.</a></li>\n</ul>\n<fieldset>\n<legend>JavaScript</legend>\n<div class=\"legend2\">data.js</div>\n<pre><code class=\"language-javascript\">\nstatic sortByRule(sortRule, users) {     \n    users.sort(Data.compareByMultipleKey(sortRule));\n    return users;\n}\n\nstatic compareByMultipleKey(sortRule) {     \n    return function (a, b) {\n      if (sortRule.length == 0) return 0; // force to quit if keys run out\n\n      let key = sortRule[0].name; // take out the first key\n      let direction = sortRule[0].sortDirection;       \n      \n      // using eval\n      // let x = eval(\"a.\" + key);\n      // let y = eval(\"b.\" + key); \n\n      // without using eval\n      let x = Data.getDescendantProp(a, key);\n      let y = Data.getDescendantProp(b, key);\n\n      if (direction === \"sort-ascending\") {        \n        if (x < y) return -1;\n        else if (x > y) return 1;\n        else return Data.compareByMultipleKey(sortRule.slice(1))(a, b);\n      } else { //\"sort-descending\"\n        if (x < y) return 1;\n        else if (x > y) return -1;\n        else return Data.compareByMultipleKey(sortRule.slice(1))(a, b);\n      }\n    }\n}\n\nstatic getDescendantProp(obj, key) {\n    var arr = key.split('.');\n    while (arr.length) {\n      obj = obj[arr.shift()];\n    }\n    return obj;\n}\n</code></pre>\n</fieldset>\n"}