function get_addGoogleMaps(){let markup;return'\n<h3>Issue. Add Google Maps.</h3>  \n<p>Add \'locate\' icon(red) to the cells in \'address\' column.\nIf a user click on the icon, then google maps with address location is\ndisplayed in the supplemental Row.</p>     \n<img src="\\assets\\picsDoc\\doc_googleMaps.jpg" alt="Google Maps"\nclass="img-responsive" width="233" height="272">\n<br>\n\n<h4>Code.</p>\n<h5><strong>Keywords: </strong></h5>\n\n<h5>1. Load the Google Maps JavaScript API to use Google Maps.</h5>\n<fieldset>\n    <legend>HTML</legend>\n    <div class="legend2">index.html</div>\n\t<script type="text/plain" class="language-markup">\t\t\t\t\n\x3c!-- google map --\x3e\n<script type="text/javascript" async defer\n\tsrc="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBv20hgn-XO4eow5hrPJbCTOh3SJ7wYXI">\n<\/script>\n<\/script>\n</fieldset>\n<p>The key = AIzaSyDBv20hgn-XO4eow5hrPJbCTOh3SJ7wYXI is my google key.\nThe key can be overused or expired. So, it is the best to get your personal key.\nHow to get an API key see at\n<a href="https://developers.google.com/maps/documentation/javascript/get-api-key" target="_blank">Get an API Key</a></p>\n\n<h5>2. Add map to the supplemental row: add icon to the \'address\' cell,\nadd the onclick function to insert the map in the supplemental row.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nPopulateTable() {\t\t\n    //....\n    else if (this.tableHeaderContext.cellContexts[i].name === "address") {  // address \t\t\n        cell.innerHTML = this.getInnerHtmlForCellAddress(cellValue, item);\n    }\n    //....\n}\n\ngetInnerHtmlForCellAddress(cellValue, item) {\n\n    let innerHtml = "";\n    cellValue = this.getAddress(item);\n    if (cellValue != null && String(cellValue) !== \' \') {\n        //todo default geo\n        let mapMarkerText = "";\n        let lat = 0;\n        let lng = 0;\n        if ("geo" in item.address) {\n            lat = item.address.geo.lat;\n            lng = item.address.geo.lng;\n            mapMarkerText = item.address.street + \', \'\n                + item.address.city + \', \'\n                + item.address.zipcode;\n        }\n\n        let name = \'map\';\n        let cssCellClassName = \'googleMaps-map\';\n        let onClickGoogleMap = `(function(){\t\n                            let iRowClickedIndex = event.target.closest(\'tr\').rowIndex;\t\t\t\t\t\t\t\t\t\t\t\t\t\n                            let iSupplementalRow = table.putImageToSupplementalRow(\'${name}\', \'${cssCellClassName}\', iRowClickedIndex);\n                            if(iSupplementalRow > 0) {\n                                let cell = table.table.rows[iSupplementalRow].cells[0];\n                                let map = table.initializeGoogleMaps(\'${lat}\', \'${lng}\', cell, iSupplementalRow);\n                                table.googleMapLoad(map);\t\t\t\t\n                            }\n                            })()`;\n        //...        \n\n        innerHtml = (new td("", []))\n            .iconContainer("span", `tooltip fade shiftGoogle`, "data-tooltip", "Display Google Maps", onClickGoogleMap)\n            .addIcon("googleMapsMarkerIcon fa fa-map-marker")            \n            .textContainer(\'span\', \'searchble-txt\', cellValue)\n            .toHtml();\n    }\n\n    return innerHtml;\n}\n</code></pre></fieldset>\n\n<p>In the listener: the mehod putImageToSupplementalRow() open the supplemental row and\nadd empty div container to row cell. The method initializeGoogleMaps() get data from google maps\nand put them in the div container.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ninitializeGoogleMaps(lat, lng, cell, iRowMap) {\n    var coord = { lat: Number(lat), lng: Number(lng) };\n    var prop = {\n        center: new google.maps.LatLng(Number(lat), Number(lng)),\n        zoom: 14,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n\n    if (cell.children.length < 1)\n        return;\n\n    var container = cell.children[0];\n\n    // remove/add div for map update (otherwise instance error)\n    for (let i = 0; i < cell.children[0].children.length; i++) {\n        let child = cell.children[0].children[i];\n        if (child.classList.contains(\'googleMaps-map\')) {\n            container.removeChild(child);\n        }\n    }\n\n    // div for map display\n    var div = document.createElement(\'div\');\n    let id = \'googleMaps-map\' + String(iRowMap);\n    div.id = id;\n    div.style.display = \'block\';\n    div.classList.add(\'googleMaps-map\');\n    div.classList.add(\'item\');\n    container.appendChild(div);\n\n    let map = new google.maps.Map(div, prop);\n    let marker = new google.maps.Marker({ position: coord, map: map });\n    return map;\n}\n</code></pre></fieldset>\n\n<p>We also add method googleMapLoad() to resize map when browser window is resized.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngoogleMapLoad(map) {\t\t\n    google.maps.event.trigger(map, \'resize\');\n}\n</code></pre></fieldset>\n\n<fieldset>\n    <legend>CSS</legend>\n    <div class="legend2">table.css</div>\n    <pre><code class="language-css">\n    .googleMapsMarkerIcon {\n        display:inline; \n        color:red;\n        font-size: 1.0rem;\n        font-weight: bold;\n        cursor: pointer; \n        margin: 0 0.4rem 0 0rem; \n    } \n </code></pre>\n</fieldset>\n'}