function get_highlightResult(){let markup;return'\n<h3>Issue. Highlight Search Results.</h3>\n<p>Highlight table search results as on Fig.1</h5>\n<h5>Fig.1</h5>        \n<img src="\\assets\\picsDoc\\doc_highlightResult.jpg" alt="Highlight Result"\nclass="img-responsive" width="600" height="400">\n\n<h4>Code.</p>\n<h5><strong>Keywords: </strong></h5>\n\n<h5>1. Extract the searchable information from json file and add it to the table cell.</h5>\n<h5>1.1. Put searchable information into span container.</h5>\n<p> As the first step, we put information, that we intend to display in the table cell,\nto the span container with css class \'searchble-txt\'. This container we can use to manipulate\nthe information.</p>\n\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nPopulateTable() {\n// ...\n    let cellValue = Object.values(item)[i];\n\n    // put id value in the cell\t\t\t\t\t\t\t\t\n    if (this.tableHeaderContext.cellContexts[i].name === "id") {  // id\n        cell.innerHTML = (new td("", [])).textContainer(\'span\', \'searchble-txt\', cellValue).toHtml();                \t\t\t\t\t\n    }     \n// ...\n}\n</code></pre></fieldset>\n\n<p> For each json node, we set rules for text extraction.\nFor example, for node \'name\'.</p>\n\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nPopulateTable() {\n// json data \'contacts\'\nthis.contacts.forEach(item => {\n//...\n// put contact value to the table cell\nfor (let i = 0; i < this.tableHeaderContext.cellContexts.length; i++) {\n    let cellValue = Object.values(item)[i];\n    // parse object to text \n    if (typeof (cellValue) === "object") {\n        let result = [];\n        Parser.parseObject(cellValue, result);\n        cellValue = result.join(separatorBr);\n    }\n//...\t\t\t\n    else if (this.tableHeaderContext.cellContexts[i].name === "name") {  // name\n        cell.innerHTML = this.getInnerHtmlForCellName(cellValue, item);\t\t\t\t\t\n    }\n//...\n}\n\ngetInnerHtmlForCellName(cellValue, item) {\n    let innerHtml = "";\n    if (cellValue != null && String(cellValue) !== \' \') {  \n        // get file name of person foto      \n        let photoName = \'PortraitPlaceholder.jpg\';\n        if ("photo" in item.name && item.name.photo != "" && item.name.photo != " ") {\n            photoName = item.name.photo;\n        }\t\t\t\n\n        // add onclick function to portrait icon\n        let cssCellClassName = \'photo-portrait\';\n        let onClick = `(function(){\t\n                        let iRowClickedIndex = event.target.closest(\'tr\').rowIndex;\t\t\t\t\t\t\t\t\t\t\t\t\t\n                        table.putImageToSupplementalRow(\'${photoName}\', \'${cssCellClassName}\', iRowClickedIndex);\n                        })()`;\n\n        // create inner html of table cell with icon and searchable text in span element \n        innerHtml = (new td("", []))\n            .iconContainer("span", `tooltip fade shiftPortrait`, "data-tooltip", "Display portrait photo", onClick)\n            .addIcon("portraitIcon fa fa-user-circle-o")\n            .textContainer(\'span\', \'searchble-txt\', item.name.firstName + \' \' + item.name.lastName)\n            .toHtml();\n    }\n    return innerHtml;\n}\n</code></pre></fieldset>\n\n<h5>2. Search matching to user input in the searchable information only.\nPut matching text within mark tags.</h5>\n\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nfilterTable(){\n    //...\n    let input = document.querySelector(".input-search");\n    let inputString = input.value; \n    if (inputString.trim().length > 0) { \n        table.filterTableAndHighliteMatchingText(filter);\n    }  \n    //...  \n}\n</code></pre></fieldset>\n\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nfilterTableAndHighliteMatchingText(filterString) {\n    //...\n    this.handleSearchableContentOfCell(cell, filterString, table.tableHeaderContext.isSencitiveSearch);\n    //...\n}\n</code></pre></fieldset>\n\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nhandleSearchableContentOfCell(cell, filter, isSensitive ){ \n               \n    let isHighlighted = "false";\n    let content = cell.innerHTML; \n    let searchableContent = "";\n\n    // searchable content is located between separator1 and separator2 (in the cell last child)       \n    let separator1 = \'<span class="searchble-txt">\';\n    let separator2 = \'</span>\';\n\n    let pos1 = content.indexOf(separator1, 0);\n    let pos2 = content.indexOf(separator2, pos1 + separator1.length);\n    \n    if( pos1 > -1 && pos2 > 0)\n    { \n        // extract searchable content           \n        searchableContent = content.slice(pos1 + separator1.length, pos2);             \n\n        let highlightedContent = this.highlightFinding(searchableContent, filter, isSensitive);\n        \n        // put matching text within mark tags (remove/add child)\n        cell.removeChild(cell.querySelector(".searchble-txt"));            \n        let lastChild = document.createElement(\'span\');\n        lastChild.classList.add("searchble-txt");\n        lastChild.innerHTML = highlightedContent;      \t\t\t\t\n        cell.appendChild(lastChild);            \n\n        if( highlightedContent !== searchableContent){                \n            isHighlighted = "true";\n        }\n    }    \n    return  isHighlighted;       \n}\n</code></pre></fieldset>\n\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nhighlightFinding(searchableContent, filter, isSensitive){\n\n    let str = searchableContent;\n    let result = searchableContent;\n    let flt = filter;\n    \n    if(isSensitive === "false"){\n        str = searchableContent.toUpperCase();\n        flt = filter.toUpperCase();\n    }\n\n    let sub = "";\n    let sub1 = "";        \n    let pos0 = 0;\n    let pos1 = str.indexOf(flt, pos0);\n\n    // disassemble string - put matching within mark tags - assemble string\n    while (pos1 > -1) {\n        sub1 = sub.concat("", searchableContent.substring(pos0, pos1));\n\n        // highlight selection\n        sub = sub1.concat("", `<mark>${searchableContent.substring(pos1, pos1 + flt.length)}</mark>`);\n\n        pos0 = pos1 + flt.length;\n        pos1 = str.indexOf(flt, pos0);\n\n        if (pos1 < 0) {\n            result = sub.concat("", searchableContent.substring(pos0));\n        }\n    }\n    \n    return result;\n}    \n</code></pre></fieldset>\n'}