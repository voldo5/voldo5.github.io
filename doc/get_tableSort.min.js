function get_tableSort(){let markup;return'\n<h3>Issue. Table Sort.</h3>\n<p>Add a multi-column sorting property to the table.\nSort the table by column ascending or descending by mouse clicking on the column header,\nsort the table by multi-column by Shift + Click on the required column headers.\nIndicate sort direction by icon.</p>\n<h5>Fig.1</h5>        \n<img src="\\assets\\picsDoc\\doc_tableSort.jpg" alt="Table Sort Header icons"\nclass="img-responsive" width="600" height="400">\n<br>\n\n<h4>Code.</p>\n<h5><strong>Keywords: array.sort()</strong></h5>\n<h5>1. Add sort indication icon and listener to every column header.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ncreateTableHeaderFirstRow() {\n    // ...    \t\n    for (let i = 0; i < this.tableHeaderContext.cellContexts.length; i++) {\n        var cell = document.createElement(\'th\');\n        // ... \n        // sort indication\n        var span = document.createElement(\'span\');\n        span.classList.add(\'table-sortind\');\n        cell.appendChild(span);\n    }\n    // add listeners to row cells: click on the column header\n    // of the table causes the table to be sorted by column\n    for (let i = 0; i < this.tableHeaderContext.cellContexts.length; i++) {\n        if (!this.table.rows[0].cells[i].classList.contains("notsorted")) {\n            this.table.rows[0].cells[i].\n                addEventListener("click", () => {\n                    var isShiftKeyPressed = event.shiftKey;\n                    this.updateTable(i, isShiftKeyPressed, this.tableHeaderContext, this.table);\n                });\n        }\n    }\n}\n</code></pre></fieldset>\n\n<fieldset>\n<legend>CSS</legend>\n<div class="legend2">table.css</div>\n<pre><code class="language-css">\n/* sort indication in the column headers  */\n.table .table-sortind{\n    color: #ccc;\n    padding-left: 4px;  \n}\n.table .sort-descending .table-sortind:after {  \n    content: "\\25bc";\n}\n.table .sort-ascending .table-sortind:after {\n    content: "\\25b2";\n}\n.table .unsorted .table-sortind:after {\n    content: " ";\n}\n</code></pre></fieldset>\n\n<h5>2. Sort data and update the table after click on column header.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nupdateTable(iLatestClickedCell, isShiftKeyPressed, tableHeaderContext, table) {\t\t\n    let updatedSortContext = this.updateTableHeaderSortContext(iLatestClickedCell,\n        tableHeaderContext.sortContext, isShiftKeyPressed);\n    tableHeaderContext.sortContext = updatedSortContext;\n\n    let updatedCellContexts = this.updateTableHeaderCellContexts(tableHeaderContext);\n    tableHeaderContext.cellContexts = updatedCellContexts;\n\n    let sortRule = this.extractSortRule(tableHeaderContext);\t\t\n    this.contacts = Data.sortByRule(sortRule, this.contacts);\t\t\n        \n    this.updateTableHeaderRow(tableHeaderContext.cellContexts, table);\n    this.PopulateTable();\t\t\n}\n</code></pre></fieldset>\n\n<h5>2.1. Update table sort context (keep in mind the clicked headers).</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nupdateTableHeaderSortContext(i, sortContext, isShiftKeyPressed) {\n    sortContext.iLatestClickedCell = i;\n    if (isShiftKeyPressed) {\n        if (!sortContext.iClickedCells.includes(i)) {\n            sortContext.iClickedCells.push(i);\n        }\n        else { } //do nothing;\t\t\t\t\t\t\t\t\t\n    }\n    else {\n        sortContext.iClickedCell = i;\n        sortContext.iClickedCells = [];\n        sortContext.iClickedCells.push(i);\n    }\n    return sortContext;\n}\n</code></pre></fieldset>\n\n<h5>2.2. Update table header cell contexts (add and toggle header cell css classes).</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nupdateTableHeaderCellContexts(tableHeaderContext) {\t\n    let sortContext = tableHeaderContext.sortContext;\n    let cellContexts = tableHeaderContext.cellContexts;\n    let iClicked = sortContext.iLatestClickedCell;\n    // toggle column header css classes to display column sort order on nothing\n    for (let i = 0; i < cellContexts.length; i++) {\n        let list = cellContexts[i].cssClassList;\n        let iUnsorted = list.indexOf("unsorted"); // no icon\n        let iAscending = list.indexOf("sort-ascending");  // icon ascending\n        let iDescending = list.indexOf("sort-descending");  // icon descending\n        if (i === iClicked) {\n            // toggle classes\n            if (iUnsorted > -1) { list.splice(iUnsorted, 1, \'sort-ascending\'); }\n            else if (iAscending > -1) { list.splice(iAscending, 1, \'sort-descending\'); }\n            else if (iDescending > -1) { list.splice(iDescending, 1, \'sort-ascending\'); }\n        } else {\n            if (sortContext.iClickedCells.includes(i)) { continue; }\n            else if (iAscending > -1) { list.splice(iAscending, 1, \'unsorted\'); }\n            else if (iDescending > -1) { list.splice(iDescending, 1, \'unsorted\'); }\n        }\n        tableHeaderContext.cellContexts[i].cssClassList = list.slice();\n    }\n    return tableHeaderContext.cellContexts;\n}\n</code></pre></fieldset>\n\n<h5>2.3. Extract Sort Rule from the table header context.</h5>\n<p>Sort Rule is array of { data node key, sort direction}.\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nextractSortRule(tableHeaderContext) {\n    let sortRule = [];\n    tableHeaderContext.sortContext.iClickedCells.forEach(i => {\n        let list = tableHeaderContext.cellContexts[i].cssClassList;\n        let sortDirection = "unsorted";\n        if (list.indexOf("sort-ascending") > -1) {\n            sortDirection = "sort-ascending";\n        }\n        else if (list.indexOf("sort-descending") > -1) {\n            sortDirection = "sort-descending";\n        }\n        let name = tableHeaderContext.cellContexts[i].name;\n        // name sort by first name\n        if(name === "name"){\n           name = "name.firstName";\n        }\n        // user name sort by username\n        if(name === "username"){\n            name = "username.username";\n        }\n        // address sort by username\n        if(name === "address"){\n            name = "address.city";\n         }\n        // company sort by name\n        if(name === "company"){\n            name = "company.name";\n        }\n        sortRule.push({ name, sortDirection });\t\t\t\n    });\n    return sortRule;\n}\n</code></pre></fieldset>\n\n<h5>2.4. Sort contacts data by Sort Rule.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nstatic sortByRule(sortRule, users) {\n    users.sort(Data.compareByMultipleKey(sortRule));\n    return users;\n}\n</code></pre></fieldset>\n<p>In our case, users is an array of objects. So we can use array in-build sort\nfunction: array.sort(compareFunction).</p>\n<br>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nstatic compareByMultipleKey(sortRule) {     \n    return function (a, b) {\n      if (sortRule.length == 0) return 0; // force to quit if keys run out\n\n      let key = sortRule[0].name; // take out the first key\n      let direction = sortRule[0].sortDirection;       \n      \n      // using eval\n      // let x = eval("a." + key);\n      // let y = eval("b." + key); \n\n      // without using eval\n      let x = Data.getDescendantProp(a, key);\n      let y = Data.getDescendantProp(b, key);\n\n      if (direction === "sort-ascending") {        \n        if (x < y) return -1;\n        else if (x > y) return 1;\n        else return Data.compareByMultipleKey(sortRule.slice(1))(a, b);\n      } else { //"sort-descending"\n        if (x < y) return 1;\n        else if (x > y) return -1;\n        else return Data.compareByMultipleKey(sortRule.slice(1))(a, b);\n      }\n    }\n}\n\nstatic getDescendantProp(obj, key) {\n    var arr = key.split(\'.\');\n    while (arr.length) {\n      obj = obj[arr.shift()];\n    }\n    return obj;\n}\n</code></pre></fieldset>\n\n<h5>2.5. Update Column Headers (toggle sort direction icons).</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nupdateTableHeaderRow(cellContexts, table) {\t\t\n    for (var i = 0; i < table.rows[0].cells.length; i++) {\n        // merge css classes from cellContext and column header cell.classList\n        cellContexts[i].cssClassList.forEach(item => {\n            // if sort by the column - remove "unsorted" \n            if (item.includes("sort-ascending") || item.includes("sort-descending")) {\n                table.rows[0].cells[i].classList.remove("unsorted");\n            }\n            // toggle column sort direction \n            if (item.includes("sort-ascending")) {\n                table.rows[0].cells[i].classList.remove("sort-descending");\n                table.rows[0].cells[i].classList.add("sort-ascending");\n            }\n            if (item.includes("sort-descending")) {\n                table.rows[0].cells[i].classList.remove("sort-ascending");\n                table.rows[0].cells[i].classList.add("sort-descending");\n            }\n            // class name will be added only if the element does not have it\n            table.rows[0].cells[i].classList.add(item);\n        });\n    }\n}\t\n</code></pre></fieldset>\n\n<h5>2.6. Populate the table by sorted data.</h5>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\nPopulateTable() {\t\t\n    // ...\n    // populate contacts from data to table rows\t\t\n    this.contacts.forEach(item => {\n        let row = this.table.insertRow();\n        row.classList.add(\'table-tr-data\');\n        // put property value from data to the table cell\n        for (let i = 0; i < this.tableHeaderContext.cellContexts.length; i++) {\n            let cellValue = Object.values(item)[i];            \n            let cell = row.insertCell();\n            // fill in the cell\t\n            cell.innerHTML = this.getInnerHtmlForCell(cellValue, item);\t\t\t\t\t\t\t\t\n            // ...\n            cell.classList.add(\'table-tr-data-cell\');\n            // ...\t\t\t\n        }\t\t\t\n    });\n}\n</code></pre></fieldset>\n'}