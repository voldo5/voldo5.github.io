function get_json(){let markup;return'\n<h3>JSON</h3>\n<p>JSON — short for JavaScript Object Notation — is a format for sharing data.\nA json object is a key-value data format that is typically rendered in curly braces. </p>\n<h5>Terminology</h5>\n<ul>\n<li>Javascript object - a collection of properties, and a property\nis an association between a name (or key) and a value.\n<fieldset>\n<legend>Javascript object</legend>\n<pre><code class="language-javascript">\nvar obj = {type:"Fiat", model:"500", color:"white"};\n\nData is accessed through dot notation:  obj.type, obj.model...\n</code></pre></fieldset>\n</li>\n<li>JSON object - javascript object of a certain kind\n<fieldset>\n<legend>JSON object</legend>\n<pre><code class="language-javascript">\nvar jsonObj = {"type":"Fiat", "model":"500", "color":"white"};\n\nData is accessed through dot notation:  obj.type, obj.model...\n</code></pre></fieldset>\n</li>\n<li>JSON string - string of a certain kind\n<fieldset>\n<legend>JSON string</legend>\n<pre><code class="language-javascript">\n"{"type":"Fiat", "model":"500", "color":"white"}"\n</code></pre></fieldset>\n</li>\n</ul>\n\n<h5>Using</h5>\n<ul>\n<li>Storing data in local storage - stringify(), parse(), localStorage\n<fieldset>\n<legend>Storing data</legend>\n<pre><code class="language-javascript">\n// Storing data:\nmyObj = {name: "John", age: 31, city: "New York"};\nmyJSON = JSON.stringify(myObj);\nlocalStorage.setItem("testJSON", myJSON);\n// Retrieving data:\ntext = localStorage.getItem("testJSON");\nobj = JSON.parse(text);\ndocument.getElementById("demo").innerHTML = obj.name;\n</code></pre></fieldset>\n</li>\n\n<li>Sending Data - fetch(), stringify()\n<fieldset>\n<legend>Sending Data</legend>\n<pre><code class="language-javascript">\nvar myObj = {name: "John", age: 31, city: "New York"};\n\n(async () => {\n    const rawResponse = await fetch(\'https://httpbin.org/post\', {\n      method: \'POST\',\n      headers: {\n        \'Accept\': \'application/json\',\n        \'Content-Type\': \'application/json\'\n      },\n      body: JSON.stringify(myObj)\n    });\n    const content = await rawResponse.json();\n  \n    console.log(content);\n  })();\n</code></pre></fieldset>\n</li>\n<li>Receiving Data - fetch(), parse()\n<fieldset>\n<legend>Receiving Data</legend>\n<pre><code class="language-javascript">\nvar data = \'{"name":"John", "age":31, "city":"New York"}\';\n\nfetch(\'./users.json\').then(response => {\n    return response.json();\n  }).then(data => {\n    var myObj = JSON.parse(data);\n    // Work with your JSON data here..\n    console.log(data);\n  }).catch(err => {\n    // What do when the request fails\n    console.log(\'The request failed!\'); \n  });\n</code></pre></fieldset>\n</li>\n</ul>\n\n<h5>Examples from project:</h5>\n<ul>\n<li>Issue: \n<a href="javascript:booklet.navigateRegularPages(\'get_tableOverview\', \'Table overview\');">\nTable overview.</a>\n<h5>Json table data.</h5>\n<fieldset>\n<legend>JSON</legend>\n<div class="legend2">data.js</div>\n<pre><code class="language-json">\t\t\t\n{\n  "id": 1,\n  "name": {\n    "firstName": "Michelle",\n    "lastName": "Vilms",\n    "photo": "VilmsPortrait.jpg"\n  },        \n  "username": {\n    "username": "Vilma",         \n    "avatar": "Vilms-avatar5.jpg"\n  },\n  "email": "info@vilmsconsulting.com",\n  "address": {\n    "street": "3 Arlington St",\n    "suite": "Apt.2",\n    "city": "Boston",\n    "zipcode": "02116",\n    "geo": {\n      "lat": "42.355101",\n      "lng": "-71.072574"\n    },\n    "photo": "Vilms-building.jpg"\n  },\n  "phone": "1-617-416-0113",\n  "website": "http://www.vilmsconsulting.com/",\n  "company": {\n    "name": "Vilms Consulting",\n    "catchPhrase": "Partnering with small businesses since 2008",\n    "bs": "Bring the expertise to help the clients grow their business."\n  }\n}\n</code></pre></fieldset>\n</li>\n\n<li>Fetch data.\n<fieldset>\n<legend>Javascript</legend>\n<div class="legend2">data.js</div>\n<pre><code class="language-javascript">\t\n  // Async fetch data to be certain that the response has resolved before proceeding\n  async fetchDataIntoTable(url, containerDivId, columnsNames, callbackCreateTable) {\n    try {\n      let response = await fetch(url);\n      let items = await response.json();\n      callbackCreateTable(containerDivId, columnsNames, items);\n    } catch (e) {\n      console.log(\'Error during fetch: \' + e.message);\n    }\n  }\n</li>\n</ul>\n</code></pre></fieldset>\n'}