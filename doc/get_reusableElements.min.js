function get_reusableElements(){let markup;return'\n<h3>Issue. Reusable Elements.</h3>  \n<h5>Create a next group of reusable elements that appear in the table.</h5>\n<ul>\n<li>item - item element to display text</li>\n<li>item with icon - item element to display text with icon</li>\n<li>icon container - container for icons</li>\n<li>icon - icon element</li>\n<li>input container - container for inputs and icons</li>\n<li>input - input element</li>\n<li>dropdown container - container for dropdown</li>\n<li>th - table header cell</li>\n</ul>\n<p>The elements must be JavaScript classes, and the classes\nmust allow elements to be used in a fluent API style.</p>\n\n<h4>Code.</p>\n<h5><strong>Keywords: </strong></h5>\n<p>Let\'s explain the idea in an example.</p> \n<p>Suppose, we need to add the db icon <br>\n<img src="\\assets\\picsDoc\\doc_dbIcon.jpg"\nclass="img-fixedsize-inline" width="39" height="42">\n<br>with the tooltip <br>\n<img src="\\assets\\picsDoc\\doc_dbIconTooltip.png"\nclass="img-fixedsize-inline" width="92" height="69">\n<br>to the table header, <br>\n<img src="\\assets\\picsDoc\\doc_dbHeader.jpg"\nclass="img-fixedsize-inline" width="472" height="132"></p>\n<p>and, when the mouse hover over the icon, the dropdown menu appear,\n<img src="\\assets\\picsDoc\\doc_dbIconDropdown.png"\nclass="img-fixedsize-inline" width="133" height="136"></p>\n<p>mouse click on the menu item calls the function.</p>\n<p>So, we can describe our steps as following</p>\n<ul>\n<li>1.1. Create icon container.</li>\n<li>1.2. Ð¡reate icon and put the icon in the icon container.</li>\n<li>2.1. Create dropdown container and put the dropdown container in the icon container.</li>\n<li>2.2. Create 3 items with icons and put the items in the dropdown container.</li>\n<li>3. Put the icon container into the th (table header cell).</li>\n</ul>\n                \n<p>The JavaScript code will look like this.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngetInnerHtmlForHeaderSecondRowCell(){\n  //...\n  let innerHtml = (new th(\'table-tr2-head-cell\', \'div\', \'icon-flex-container\'))\t\t\n    .iconContainer("div", \'dbIconContainer db-dropdown tooltip fade\',\n                   "data-tooltip", "Contacts", null)\n    .addIcon("dbIcon fa fa-database contacts-data")\n    .addDropdownContainer("div", "db-dropdown-content")\n    .addDropdownItem("p", "db-dropdown-item", onClickLoadContacts, "Load", \'fa fa-upload\')\n    .addDropdownItem("p", "db-dropdown-item", onClickSaveContacts, "Save", \'fa fa-download\')\n    .addDropdownItem("p", "db-dropdown-item", onClickDisplayTestContacts, "Test Data", \'fa fa-list-alt\')\n    .toHtml();  \n}\t\n</code></pre></fieldset>\n<p>Or in more detail.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\n\ncreateTableHeaderSecondRow() {\n//...\t\t\n  let cell = document.createElement(\'th\');\n  row.appendChild(cell);\t\t\n  cell.innerHTML = this.getInnerHtmlForHeaderSecondRowCell();\n//...\t\t\t\n}\n\ngetInnerHtmlForHeaderSecondRowCell(){\n  //... \n  let onClickDisplayTestContacts = \'(function(){\n    table.displayTestContacts();\t\t\t\t\t\t\t\t\t\n  })()\';\n\n  let onClickSaveContacts = \'(function(){\n    table.saveContacts();\t\t\t\t\t\t\t\t\t\n  })()\';\n\n  let onClickLoadContacts = \'(function(){\n    table.loadContacts();\t\t\t\t\t\t\t\t\t\n  })()\';\n\n  let innerHtml = (new th(\'table-tr2-head-cell\', \'div\', \'icon-flex-container\'))\t\t\n    .iconContainer("div", \'dbIconContainer db-dropdown tooltip fade\',\n                   "data-tooltip", "Contacts", null)\n    .addIcon("dbIcon fa fa-database contacts-data")\n    .addDropdownContainer("div", "db-dropdown-content")\n    .addDropdownItem("p", "db-dropdown-item", onClickLoadContacts, "Load", \'fa fa-upload\')\n    .addDropdownItem("p", "db-dropdown-item", onClickSaveContacts, "Save", \'fa fa-download\')\n    .addDropdownItem("p", "db-dropdown-item", onClickDisplayTestContacts, "Test Data", \'fa fa-list-alt\')\n    .toHtml();\t\t\n\n  return innerHtml;\n}\t\n</code></pre></fieldset>\n\n<p>Let\'s make some clarifications.</p>\n<p>In this code snippets we create new class \'th\' and use the class methods \'iconContainer\',\n\'addIcon\', \'addDropdownContainer\', \'addDropdownItem\', \'toHtml\' \nwith the relevant parameters to create html code (innerHtml) for table header cell.</p>\n\n<p>Look at the \'th\' class now.</p>\n<fieldset>\n<legend>JavaScript</legend>\n<script type="text/plain" class="language-markup">\t\t\t\t\nclass th {\n    constructor(cellClases, containerType, containerClasses) {\n        this.cellClases = cellClases;\n        this.containerType = containerType;\n        this.containerClasses = containerClasses;               \n        this.iconContainers = [];        \n        this.inputContainers = [];\n    } \n    \n    iconContainer(iconContainerType, iconContainerClasses, dataAttrib, tooltipText, onClick) { \n        const iconContainer = new IconContainer(iconContainerType, iconContainerClasses, dataAttrib, tooltipText, onClick);\n        this.iconContainers.push(iconContainer); \n        this.lastIconContainer = iconContainer;       \n        return this;\n    }\n\n    addIcon(iconClasses) {\n        this.lastIconContainer.addIcon(iconClasses);        \n        return this;\n    }  \n\n    addDropdownContainer(dropdownContainerType, dropdownContainerClasses) {\n        this.lastIconContainer.addDropdownContainer(dropdownContainerType, dropdownContainerClasses);\n        this.lastDropdownContainer = this.lastIconContainer.lastDropdownContainer; \n        return this;\n    }\n\n    addDropdownItem(itemType, itemClass, itemOnClick, itemText, iconClass) {\n        this.lastDropdownContainer.addDropdownItem(itemType, itemClass, itemOnClick, itemText, iconClass); \n        return this;\n    }\n    //...\n\n  toHtml() {\n        return <th class = \'${this.cellClases}\'>\n        <${this.containerType} class = \'${this.containerClasses}\'>\n                    ${this.iconContainers.map(ic => ic.toHtml()).join(\'\')}\n        </${this.containerType}>                     \n                </th>;\n  } \n} \n<\/script>\t\n</fieldset>\n\n<p>We see, that the methods return \'this\' (i.e. whole class object), so\nwe can call next class methods after previous method call, using \'.\' notation, in this way\ncreating a chain of method calls.</p>\n<p>We see, also, that the class contains method toHtml(), which returns element\'s \nhtml code. This html code we can dynamically add to the table.</p>\n<p>On the other hand, this toHtml() method use a toHtml() method of another object - IconContainer class object,\nin order to get innerHtml of iconContainer element. Thus, we can insert one element in another.</p>\n<p>All element classes are constructed similarly: constructor with paremeters, some methods\nand toHtml() method - to get html code of element.</p> \n<p>See project folder \'elements\'.</p>\n\n<h5>Method parameters.</h5>\n<p>The class method parameters are mainly css class names, html tags names and\nonClick methods.</p> \n\n<h5>Another examples of fluent API.</h5>\n<h5>Name cell.</h5>\n<p><img src="\\assets\\picsDoc\\doc_cellName.jpg" \nclass="img-fixedsize-inline" width="120" height="41"></p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngetInnerHtmlForCellName(cellValue, item) {\n  //...\n  innerHtml = (new td("", []))\n\t\t\t\t.iconContainer("span", \'tooltip fade shiftPortrait\', "data-tooltip", "Display portrait photo", onClick)\n\t\t\t\t.addIcon("portraitIcon fa fa-user-circle-o")\n\t\t\t\t.textContainer(\'span\', \'searchble-txt\', item.name.firstName + \' \' + item.name.lastName)\n\t\t\t\t.toHtml();\n  //...\n}\n</code></pre></fieldset>\n\n<h5>User Name cell.</h5>\n<p><img src="\\assets\\picsDoc\\doc_cellUserName.jpg" \nclass="img-fixedsize-inline" width="101" height="30"></p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngetInnerHtmlForCellUserName(cellValue, item) {\n  //...\n  innerHtml = (new td("", []))\n\t\t\t\t.iconContainer("span", \'tooltip fade shiftAvatar\', "data-tooltip", "Display avatar", onClick)\n\t\t\t\t.addIcon("avatarIcon fa fa-user-circle")\n\t\t\t\t.textContainer(\'span\', \'searchble-txt\', item.username.username)\n\t\t\t\t.toHtml();\n  //...\n}\n</code></pre></fieldset>\n\n<h5>Address cell.</h5>\n<p><img src="\\assets\\picsDoc\\doc_cellAddress.jpg" \nclass="img-fixedsize-inline" width="306" height="46"></p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngetInnerHtmlForCellAddress(cellValue, item) {\n\n  //...\n    innerHtml = (new td("", []))\n      .iconContainer("span", \'tooltip fade shiftGoogle\', "data-tooltip", "Display Google Maps", onClickGoogleMap)\n      .addIcon("googleMapsMarkerIcon fa fa-map-marker")\n      .iconContainer("span", \'tooltip fade shiftOsm\', "data-tooltip", "Display OpenStreet Map", onClickOpenStreetMap)\n      .addIcon("openStreetMapMarkerIcon fa fa-map-marker")\n      .iconContainer("span", \'tooltip fade shiftEstate\', "data-tooltip", "Display Photo Estate", onClickPhotoEstate)\n      .addIcon("photoIcon fa fa-picture-o")\n      .textContainer(\'span\', \'searchble-txt\', cellValue)\n      .toHtml();\n  //...\n}\n</code></pre></fieldset>\n\n<h5>Phone cell.</h5>\n<p><img src="\\assets\\picsDoc\\doc_cellPhone.jpg" \nclass="img-fixedsize-inline" width="110" height="44"></p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngetInnerHtmlForCellPhone(cellValue) {\n  //...\n  innerHtml = (new td("", []))\n  .iconContainer("span", \'tooltip fade shiftSkype\', "data-tooltip", "Call Skype", onClickSkype)\n  .addIcon("skypeIcon fa fa-skype")\n  .iconContainer("span", \'tooltip fade shiftLandPhone\', "data-tooltip", "Call Land Line", onClickLandPhone)\n  .addIcon("table-phoneind fa fa-skype")\t\t\t\t\n  .textContainer(\'span\', \'searchble-txt\', cellValue)\n  .toHtml();\n  //...\n}\n</code></pre></fieldset>\n\n<h5>Table command row.</h5>\n<p><img src="\\assets\\picsDoc\\doc_tableHeader2ndRow_a.jpg" \nclass="img-responsive" width="600" height="400"></p>\n<fieldset>\n<legend>JavaScript</legend>\n<div class="legend2">table.js</div>\n<pre><code class="language-javascript">\ngetInnerHtmlForHeaderSecondRowCell(){\n  //...\n  let innerHtml = (new th(\'table-tr2-head-cell\', \'div\', \'icon-flex-container\'))\t\t\n\t\t\t.iconContainer("div", \'dbIconContainer db-dropdown tooltip fade\',\n\t\t\t                "data-tooltip", "Contacts", null)\t\t\t            \n\t\t\t.addIcon("dbIcon fa fa-database contacts-data")\n\t\t\t.addDropdownContainer("div", "db-dropdown-content")\n\t\t\t.addDropdownItem("p", "db-dropdown-item", onClickLoadContacts, "Load", \'fa fa-upload\')\n\t\t\t.addDropdownItem("p", "db-dropdown-item", onClickSaveContacts, "Save", \'fa fa-download\')\n\t\t\t.addDropdownItem("p", "db-dropdown-item", onClickDisplayTestContacts, "Test Data", \'fa fa-list-alt\')\n\t\t\t.iconContainer("span", \'addRowIconContainer tooltip fade\', "data-tooltip",\n\t\t\t               "Add new contact", onClickAddContact)\n\t\t\t.addIcon("addRowIcon fa fa-plus add-row")\t\n\t\t\t.iconContainer("span", \'updateRowIconContainer tooltip fade\',\n\t\t\t               "data-tooltip", "Edit selected contact", onClickEditContact)\n\t\t\t.addIcon("updateRowIcon fa fa-pencil edit-row")\t\t\t\t\t\n\t\t\t.iconContainer("span", \'deleteRowIconContainer tooltip fade\',\n\t\t\t               "data-tooltip", "Delete selected contact", onClickDeleteContact)\n\t\t\t.addIcon("deleteRowIcon fa fa-trash-o delete-row")\t\t\t\n\t\t\t.inputContainer(\'span\', \'input-searchTable\', onKeyEnterSearch)\n\t\t\t.addInput(\'text\', \'Searching ...\', \'input-search\')\n\t\t\t.addIconContainerWithIcon("span", \'tooltipSearch tooltip fade\',\n\t\t\t                "data-tooltip", "Search table", \'fa fa-search\', onClickSearch)\t\t\t\t\t\t\n      .toHtml();\n    //...\t\t\n}\n</code></pre></fieldset>\n'}